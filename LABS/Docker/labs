--- Lab: Weather s API kľúčom --- 
Spustite aplikáciu (kontajner) z obrazu bletvaska/weather, ktorá
- sa bude volať weather,
- vypublikuj port 8000 na ktorom je aplikacia dostupna, 
- bude získavať informácie o meste Bratislava každých 30 sekúnd, a
- aby bolo možné tieto informácie zo služby openweathermap.org získať, je
potrebné použiť token 9e547051a2a00f2bf3e17a160063002d.
Ak budete postupovať správne, po spustení uvidíte aktuálne počasie v Bratislave.

SOLUTION:
docker container run --rm -it \
--name weather \
--publish 8000:8000 \
--env WEATHER_QUERY="Bratislava" \ 
--env WEATHER_UPDATE_INTERVAL=30 \ 
--env WEATHER_TOKEN="9e547051a2a00f2bf3e17a160063002d" \
bletvaska/weather

##################################

--- Lab: Pocasie pre Kosice a Bratislavu
Spustite aplikáciu z obrazu bletvaska/weather tak, aby ste mali na porte 8000 k dispozícii
počasie pre Košice a na porte 9000 ste mali k dispozícii počasie pre Bratislavu.
Kontajner s počasím z Košíc pomenujte weather-ke a kontajner s počasím z Bratislavy
pomenujte weather-ba. Zoznam potrebných premenných prostredia nájdete na stránke
obrazu bletvaska/weather.

SOLUTION: 
docker container run --detach \
--name weather-ke \ 
--env WEATHER_QUERY="Kosice" \
--env WEATHER_UPDATE_INTERVAL=30 \
--env WEATHER_TOKEN="9e547051a2a00f2bf3e17a160063002d" \
--publish 8000:8000 \
bletvaska/weather

docker container run --detach \
--name weather-ba \ 
--env WEATHER_QUERY="Bratislava" \
--env WEATHER_UPDATE_INTERVAL=30 \
--env WEATHER_TOKEN="9e547051a2a00f2bf3e17a160063002d" \
--publish 9000:8000 \
bletvaska/weather

#####################################

--- Lab: Running MinIO with Custom Credentials --- 
Spustite úložisko MinIO, ktoré je kompatibilné so službou S3 od Amazon-u. Pri spúšťaní
musí platiť:
kontajner pre úložisko MinIO vytvorte z obrazu bitnami/minio a pomenujte ho
minio
● do hostiteľského počítača publikujte porty z kontajnera 9000 a 9001
● do premennej MINIO_ENV vložte hodnotu development
● nastavte prihlasovacie údaje pre používateľa admin s heslom secret123 pomocou
premenných prostredia MINIO_ROOT_USER a MINIO_ROOT_PASSWORD
● pomocou premennej TZ nastavte časovú zónu na Europe/Bratislava
● pomocou premennej MINIO_DEFAULT_BUCKETS zabezpečte, aby sa rovno po
spustení vytvorili tieto buckety:
○ pictures
○ videos
○ music
○ documents
Po úspešnom spustení môžete otvoriť prehliadač na adrese http://$HOSTIP:9001, kde 
máte k dispozícii admin rozhranie. Prihláste sa pomocou zadaného prihlasovacieho loginu a
hesla. Do vytvorených bucket-ov môžete nahrať niekoľko ľubovoľných súborov.
Riešiť úlohu môžete pomocou samostatných volieb pri spúšťaní kontajnera alebo vytvorením .env súboru.

SOLUTION: 
docker container run --rm -it \
-- name minio \
-- publish 9000:9000 \
-- publish 9001:9001 \ 
-- env-file variables.env \
bitnami/minio 

variable.env
MINIO_ENV=development
MINIO_ROOT_USER=admin
MINIO_ROOT_PASSWORD=secret123
TZ=Europe/Bratislava
MINIO_DEFAULT_BUCKETS=pictures,videos,music,documents 

###########################################

--- Lab: MySQL with ADMINER ---
Spustite databázový server, ku ktorému budete pristupovať pomocou jednoduchého
rozhrania Adminer. O vašom riešení musí platiť:
● kontajner pre admin rozhranie vytvorte z obrazu adminer a pomenujte ho ako ui
● kontajner pre databázu vytvorte z obrazu mysql so značkou 8.0 a pomenujte ho
ako db
● heslo pre používateľa root v databázovom serveri nechajte vygenerovať náhodne
● do hosťovského počítača tunelujte len port 8080 z kontajnera adminer a namapujte
ho na port 80
● pri inicializácii nech je vytvorená aj databáza batcave pre používateľa batman s
heslom catwoman
Ak ste postupovali správne, po otvorení prehliadača na adrese http://$HOSTIP sa
zobrazí rozhranie Adminer-a. Ak sa prihlásite s účtom používateľa root na databázový
server, dostanete sa do jeho admin.
Poznámka: Pre pripojenie sa na databázový server z admin rozhrania použite jeho IP
adresu. Tú zistíte napríklad príkazom container inspect.

SOLUTION: 
docker container run --detach --rm \
--name ui \
--publish 80:8080 \
adminer 

docker container run --rm -it \
--name db \
--env-file db.env \
mysql:9.0

db.env
MYSQL_RANDOM_ROOT_PASSWORD=yes
MYSQL_USER=batman
MYSQL_PASSWORD=catwoman
MYSQL_DATABASE=batcave

- heslo pre roota sa zobrazi v logu 
- ip addresu najdes docker: container inspect db | jq .[].NetworkSettings.IPAddress

###############################################
--- Lab: My Homepage --- 
Pomocou obrazu nginx vytvorte svoju domovskú stránku, ktorá sa spustí ako predvolená stránka webového servera nginx. 
Po spustení tohto obrazu sa stránka zobrazí v prehliadači.

Pri realizovaní úlohy dodržte tieto pokyny:
- základ vášho obrazu bude postavený na nginx
- kontajner pomenujte homepage a publikujte port 80
- ako domovskú stránku si stiahnite niektorú z voľne dostupných šablón napr. pre Bootstrap (pekným príkladom je freelancer)
- podpíšte sa do stránky (napr. prepíšte najväčší názov)
- do päty stránky zapíšte verziu a autora stránky z premenných kontajnera
svoju domovskú stránku nahrajte do priečinku /usr/share/nginx/html pomocou príkazu container cp

Výsledok svojej práce si viete overiť otvorením prehliadača na adrese http://$HOSTIP, 
prípadne zobrazením obsahu priečinku /usr/share/nginx/html, v ktorom sa musia nachádzať všetky súbory a priečinky zo stiahnutej šablóny.

SOLUTION:
wget https://github.com/startbootstrap/startbootstrap-freelancer/archive/gh-pages.zip
unzip gh-pages.zip
upravis index.html 

docker container run --rm --detach \
--name homepage \
--publish 80:80 \
nginx

docker container cp freelancer/. homepage:/usr/share/nginx/html

#####################################################
--- Lab: Persistent Homepage (pomenovany zvazok) --- 
Zabezpec trvacnost dat mojej domovskej stranky pomocou pomenovanych zvazkov

SOLUTION: 
docker container run --rm --detach \
--name homepage \
--publish 80:80 \
--volume www:/usr/share/nginx/html \
nginx

docker container run --rm --detach \
--name homepage \
--publish 80:80 \
nginx

#####################################################
--- Lab: Persistent Homepage (bind mount) ---
Domovsku stranku tentoraz nechajte ulozenu v hostitelskom operacnom systeme v priecinku www. 
Tento priecinok nasledne pripojte ku kontajneru s obrazom nginx:alpine tak, aby ho tent opouzil ako domovsku stranku. 

SOLUTION: 
docker container run --rm --detach \
--name homepage \
--publish 80:80 \
--volume $(pwd)/www:/usr/share/nginx/html \
nginx

####################################################
--- Lab: User/File prava --- 
Spusti container s lokalnymi pravami uzivatela

SOLUTION:
docker container run --rm \
--volume .:/data \
--user $(id --user):$(id --group)\
alpine

######################################################

--- Lab: Wordpress App --- 
Vytvorte kompoziciu troch kontajnerov, ktore budu poskytovat vo vysledku perzistentnú aplikaciu CMS Wordpress. 
Pre vase riesenie musi platit:

kontajner aplikacie Wordpress spustite z obrazu wordpress a pomenujte ho wp
ako databazu použite kontajner z obrazu mysql a pomenujte ho db
pre admin rozhranie databázy spustite kontajner Adminer z obrazu adminer a pomenujte ho adminer
Wordpress bude k dispozícii lokalne na porte 80
Adminer bude k dispozícii lokalne na porte 8080
všetky kontajnery spustite v sieti wordpress
všetky zväzky, ktoré vytvoríte pre zabezpečenie perzistencie, označte prefixom wp_
pre konfiguraciu pripojenia Wordpress-u k databaze pouzite premenne prostredia, aby tato cast zbehla automaticky 
konfiguracia databazy bude nasledovná:

root heslo: secret
meno databázy pre Wordpress: wordpress
meno pouzivatela Wordpress databázy: wp_user
heslo pre používateľa Wordpress databázy: wp_password 

Ak ste postupovali spravne, po prístupe prehliadacom na adresu http://$HOSTIP uvidíte rozhranie aplikacie Wordpress, 
kde len dokončíte process instalacie a nastavite veci ako jazyk, nazov stranky, prveho pouzivatela a pod. 
A keď otvoríte prehliadač na adrese http://$HOSTIP:8080 uvidíte webové rozhranie aplikacie Adminer, 
s ktorým sa viete prihlásiť do databázy bud ako pouzivatel root s heslom secret alebo ako pouzivatel wp_user s heslom wp_password.

SOLUTION: 
docker-compose.yaml
services:
  wp:
    image: wordpress
    ports:
      - 80:80
    networks:
      - wordpress
    volumes:
      - wp_data:/var/www/html
    environment:
      WORDPRESS_DB_HOST: ${WP_HOST} 
      WORDPRESS_DB_USER: ${WP_USER} 
      WORDPRESS_DB_PASSWORD: ${WP_USER_PASS} 
      WORDPRESS_DB_NAME: ${WP_DATABASE}

  db:
    image: mysql
    networks:
      - wordpress
    volumes:
      - wp_db:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASS}
      MYSQL_USER: ${WP_USER} 
      MYSQL_PASSWORD: ${WP_USER_PASS} 
      MYSQL_DATABASE: ${WP_DATABASE}

  adminer: 
    image: adminer 
    ports: 
      - 8080:8080
    networks:
      - wordpress

volumes:
  wp_db: {}
  wp_data: {}  

networks:
  wordpress: {}
------
.env 
DB_ROOT_PASS=secret
WP_USER=wp_user
WP_USER_PASS=wp_password
WP_DATABASE=wordpress
WP_HOST=db
-------
$ docker compose up 

################################################

--- Lab: Toolbox as Alias --- 
Vytvorte alias s názvom toolbox, ktorý spustí kontajner z obrazu bletvaska/toolbox.
Toolbox je obraz nabitý rozličnými nástrojmi, ktoré ocení nejeden devops inžinier. Alias
toolbox vám uľahčí jeho používanie vo vašej každodennej práci. Zabezpečte, aby:
● sa po spustení a hlavne po ukončení kontajner odstránil
● bol do priečinku kontajnera /home/work pripojený lokálny priečinok, v ktorom sa
práve nachádzate
● UID používateľa a GID používateľa v kontajneri zodpovedali uvedeným údajom
lokálneho používateľa
Použitie alias-u bude následne vyzerať takto:
$ toolbox vim hello.md

SOLUTION: 
alias toolbox="docker container run --rm -it bletvaska/toolbox"
toolbox vim <file>

#####################################################

--- Lab: Matrix Dockerfile creation --- 
SOLUTION: 
Dockerfile 
FROM alpine:3.20

LABEL maintainer="mirek <mirek@cnl.sk>"
LABEL homepage="https://bletvaska.github.io"
LABEL description="Terminal based replica of the digital rain from The Matrix."

RUN apk add tmatrix

ENV MATRIX_TITLE="Docker Rocks!"

CMD [ "/bin/sh", "-c", "tmatrix --title=\"$MATRIX_TITLE\"" ]

docker image build --tag matrix:1.0 .
docker container run --rm -it matrix:1.0 

######################################################

