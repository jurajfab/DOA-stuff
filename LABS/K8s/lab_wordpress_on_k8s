--- Lab: Wordpress on K8s ---
Urobte orchestráciu kontajnerov, ktoré vo výsledku vytvoria službu poskytujúcu aplikáciu
Wordpress. Pri vytváraní sa riaďte týmito pokynmi:
1. Vytvorte samostatný menný priestor s názvom wordpress. Všetky objekty, ktoré
vytvoríte, uložte do tohto menného priestoru.
2. Vytvorte službu s názvom wp-db, ktorá spustí databázu:
● vychádzajte z obrazu mariadb
● službu spustite nad štandardným portom pre MariaDB
● heslo pre používateľa root nastavte na top.secret
● pri štarte vytvorte databázu s názvom wordpress
● vytvorte používateľa wpuser s heslom end321
● databáza bude spustená len v jednej replike
● nastavte nasledovné značky (labels):
○ tier: backend
○ env: prod
○ customer: tuke
3. Vytvorte službu s názvom wp-app, ktorá spustí aplikáciu Wordpress:
● vychádzajte z obrazu wordpress
● pripojte sa na databázu wp-db
● bude dostupná cez load balancer na porte 8000
● bude spustená v 4 replikách
● nastavte nasledovné značky (labels):
○ tier: frontend
○ env: prod
○ customer: tuke
4. Vytvorte službu s názvom wp-adminer, ktorá spustí aplikáciu Adminer:
● vychádzajte z obrazu adminer
● bude dostupná cez node port na porte 31500
● nastavte nasledovné značky (labels):
○ tier: frontend
○ env: dev
5. Riešenie vytvorte v troch manifest súboroch:
● database.yaml - spustenie databázovej služby
● application.yaml - spustenie aplikácie
● adminer.yaml - spustenie adminer-a
● manifest.yaml - bude predstavovať kompozíciu všetkých
predchádzajúcich manifest súborov v jednom

SOLUTION: 
apiVersion: v1
kind: Namespace
metadata:
  name: wordpress

--- 

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: wp-db
    tier: backend
    env: prod
    customer: tuke 
  name: wp-db
  namespace: wordpress 
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wp-db
      tier: backend
      env: prod
      customer: tuke
  template:
    metadata:
      labels:
        app: wp-db
        tier: backend
        env: prod
        customer: tuke
    spec:
      containers:
      - image: mariadb
        name: mariadb
        env:
        - name: MARIADB_ROOT_PASSWORD
          value: top.secret 
        - name: MARIADB_DATABASE
          value: wordpress
        - name: MARIADB_USER
          value: wpuser
        - name: MARIADB_PASSWORD
          value: end321

---

apiVersion: v1
kind: Service
metadata:
  labels:
    app: wp-db
    tier: backend
    env: prod
    customer: tuke
  name: wp-db
  namespace: wordpress
spec:
  ports:
  - name: db
    port: 3306
    protocol: TCP
    targetPort: 3306
  selector:
    app: wp-db
  type: ClusterIP

---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: wp-app
    tier: frontend
    env: prod
    customer: tuke 
  name: wp-app
  namespace: wordpress
spec:
  replicas: 4
  selector:
    matchLabels:
      app: wp-app
      tier: frontend
      env: prod
      customer: tuke
  template:
    metadata:
      labels:
        app: wp-app
        tier: frontend
        env: prod
        customer: tuke
    spec:
      containers:
      - image: wordpress
        name: wordpress
        env:
        - name: WORDPRESS_DB_NAME
          value: wordpress
        - name: WORDPRESS_DB_USER
          value: wpuser
        - name: WORDPRESS_DB_PASSWORD
          value: end321
        - name: WORDPRESS_DB_HOST
          value: wp-db

---          

apiVersion: v1
kind: Service
metadata:
  labels:
    app: wp-app
    tier: frontend
    env: prod
    customer: tuke
  name: wp-app
  namespace: wordpress
spec:
  ports:
  - name: www
    port: 8000
    protocol: TCP
    targetPort: 80
  selector:
    app: wp-app
  type: LoadBalancer

---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: adminer
    tier: frontend
    env: dev 
  name: adminer
  namespace: wordpress
spec:
  replicas: 1
  selector:
    matchLabels:
      tier: frontend
      env: dev 
  template:
    metadata:
      labels:
        tier: frontend
        env: dev 
    spec:
      containers:
      - image: adminer
        name: adminer

---

apiVersion: v1
kind: Service
metadata:
  labels:
    app: adminer
    env: dev
    tier: frontend
  name: wp-adminer
spec:
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
    nodePort: 31500
  selector:
    env: dev
    tier: frontend
  type: NodePort

--- Lab: Wordpress with ConfigMap and Secrets ---
Uprav manifest tak ze variables schovas do configmapy a secrets 

SOLUTION: 
db_credentials.env
MARIADB_DATABASE=wordpress
MARIADB_USER=wpuser
kubectl create configmap db-config --from-env-file db_credentials.env --output yaml --dry-run=client

db_secrets.yaml
MARIADB_PASSWORD=end321
MARIADB_ROOT_PASSWORD=top.secret
kubectl create secret generic db-secrets --from-env-file db_secrets.yaml --output yaml --dry-run=client

wp_credentials.env 
WORDPRESS_DB_NAME=wordpress
WORDPRESS_DB_USER=wpuser
WORDPRESS_DB_HOST=wp-db
kubectl create configmap wp-config --from-env-file wp_credentials.env --output yaml --dry-run=client

kubectl create secret generic wp-secrets --from-literal=WORDPRESS_DB_PASSWORD=end321 --dry-run=client --output yaml

apiVersion: v1
kind: Namespace
metadata:
  name: wordpress

--- 

apiVersion: v1
kind: ConfigMap
metadata:
  name: db-config
  namespace: wordpress
data:
  MARIADB_DATABASE: wordpress
  MARIADB_USER: wpuser

---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: 500m
  namespace: wordpress
spec:
  capacity:
    storage: 500Mi
  accessModes:
  - ReadWriteOnce
  hostPath:
    path: "/mnt/500m"
    type: DirectoryOrCreate

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wp-db-pvc
  namespace: wordpress
spec:
  storageClassName: ""
  resources:
    requests:
      storage: 200Mi
  accessModes:
  - ReadWriteOnce

--- 

apiVersion: v1
kind: Secret
metadata:
  name: db-secrets
  namespace: wordpress 
data:
  MARIADB_PASSWORD: ZW5kMzIx
  MARIADB_ROOT_PASSWORD: dG9wLnNlY3JldA==

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: wp-config
  namespace: wordpress
data:
  WORDPRESS_DB_HOST: wp-db
  WORDPRESS_DB_NAME: wordpress
  WORDPRESS_DB_USER: wpuser

---

apiVersion: v1
kind: Secret
metadata:
  name: wp-secrets
  namespace: wordpress
data:
  WORDPRESS_DB_PASSWORD: ZW5kMzIx

---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: wp-db
    tier: backend
    env: prod
    customer: tuke 
  name: wp-db
  namespace: wordpress 
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wp-db
      tier: backend
      env: prod
      customer: tuke
  template:
    metadata:
      labels:
        app: wp-db
        tier: backend
        env: prod
        customer: tuke
    spec:
      containers:
      - image: mariadb
        name: mariadb
        volumeMounts:
        - name: db-data
          mountPath: /var/lib/mysql
        envFrom:
        - configMapRef:
            name: db-config
        - secretRef:
            name: db-secrets
      volumes:
      - name: db-data
        persistentVolumeClaim:
          claimName: wp-db-pvc

---

apiVersion: v1
kind: Service
metadata:
  labels:
    app: wp-db
    tier: backend
    env: prod
    customer: tuke
  name: wp-db
  namespace: wordpress
spec:
  ports:
  - name: db
    port: 3306
    protocol: TCP
    targetPort: 3306
  selector:
    app: wp-db
  type: ClusterIP

---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: wp-app
    tier: frontend
    env: prod
    customer: tuke 
  name: wp-app
  namespace: wordpress
spec:
  replicas: 4
  selector:
    matchLabels:
      app: wp-app
      tier: frontend
      env: prod
      customer: tuke
  template:
    metadata:
      labels:
        app: wp-app
        tier: frontend
        env: prod
        customer: tuke
    spec:
      containers:
      - image: wordpress
        name: wordpress
        envFrom:
        - configMapRef:
            name: wp-config
        - secretRef:
            name: wp-secrets

---          

apiVersion: v1
kind: Service
metadata:
  labels:
    app: wp-app
    tier: frontend
    env: prod
    customer: tuke
  name: wp-app
  namespace: wordpress
spec:
  ports:
  - name: www
    port: 8000
    protocol: TCP
    targetPort: 80
  selector:
    app: wp-app
  type: LoadBalancer

---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: adminer
    tier: frontend
    env: dev 
  name: adminer
  namespace: wordpress
spec:
  replicas: 1
  selector:
    matchLabels:
      tier: frontend
      env: dev 
  template:
    metadata:
      labels:
        tier: frontend
        env: dev 
    spec:
      containers:
      - image: adminer
        name: adminer

---

apiVersion: v1
kind: Service
metadata:
  labels:
    app: adminer
    env: dev
    tier: frontend
  name: wp-adminer
  namespace: wordpress
spec:
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
    nodePort: 31200
  selector:
    env: dev
    tier: frontend
  type: NodePort


